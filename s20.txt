#include <stdio.h> 
#include <unistd.h> #include <sys/types.h> 
int main() {     pid_t pid = fork();   if (pid == 0) {    
        printf("Child Process ID: %d\n", getpid());         execl("/bin/ls", "ls", NULL);            perror("execl failed");         }      else if (pid > 0) {    
        printf("Parent going to sleep. PID: %d\n", getpid()); 
        sleep(5);  }      else {         perror("Fork failed"); } return 0; 
} 






#include <stdio.h>
int main() {
    int i, j, n, temp;
    int at[20], bt[20], ct[20], tat[20], wt[20], proc[20];
    float atat = 0, awt = 0;
    //int io_wait = 2; 
  //srand(time(0)); 
 printf("Enter the number of processes: ");
    scanf("%d", &n);
  for(i = 0; i < n; i++) {
        proc[i] = i + 1;
        printf("Enter first CPU Burst for P[%d]: ", i + 1);
        scanf("%d", &bt[i])   }
  for(i = 0; i < n; i++)  {
        printf("Enter Arrival Time for P[%d]: ", i + 1);
        scanf("%d", &at[i])   }
    for(i = 0; i < n - 1; i++) {
        for(j = i + 1; j < n; j++) {
            if(at[i] > at[j]) {
                temp = at[i]; 
                at[i] = at[j]; 
                at[j] = temp;
                temp = bt[i]; 
                bt[i] = bt[j]; 
                bt[j] = temp;
                temp = proc[i]; 
                proc[i] = proc[j]; 
                proc[j] = temp;
            }
        }
    }
    ct[0] = at[0] + bt[0];
    for(i = 1; i < n; i++) 
    {
        // random next CPU burst 1-5 units
        ct[i] = ct[i - 1] + bt[i];
    }

    // Calculate Turnaround Time and Waiting Time
    for(i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
        atat += tat[i];
        awt += wt[i];
    } printf("\nGantt Chart:\n|");
    for(i = 0; i < n; i++)
        printf(" P[%d]->%d |", proc[i],ct[i]);
    printf("\n");
    printf("\nProcess\tBT\tAT\tCT\tTAT\tWT\n");
    for(i = 0; i < n; i++)
        printf("P[%d]\t%d\t%d\t%d\t%d\t%d\n", proc[i], bt[i], at[i], ct[i], tat[i], wt[i]);

    printf("\nAverage Turnaround Time: %.2f", atat / n);
    printf("\nAverage Waiting Time: %.2f\n", awt / n);

    return 0;
}



