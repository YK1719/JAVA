#include <stdio.h> 
#include <unistd.h> #include <sys/types.h> 
int main() {     pid_t pid = fork();   if (pid == 0) {    
        printf("Child Process ID: %d\n", getpid());         execl("/bin/ls", "ls", NULL);            perror("execl failed");         }      else if (pid > 0) {    
        printf("Parent going to sleep. PID: %d\n", getpid()); 
        sleep(5);  }      else {         perror("Fork failed"); } return 0; 
} 


include <stdio.h>
#include <stdlib.h>
int main() 
{
    int n = 5, m = 3;
    int Total[3] = {7, 2, 6}; // Total resources
    int Allocation[5][3] = 
    {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 3},
        {2, 1, 1},
        {0, 0, 2}
    };
    int Request[5][3] = 
    {
        {0, 0, 0},
        {2, 0, 0},
        {0, 0, 1},
        {1, 0, 0}#,
        {0, 0, 2}
    };
    int Need[5][3], Available[3];
    int choice, i, j;

    // Calculate Need matrix = Request matrix
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            Need[i][j] = Request[i][j]-Allocation[i][j];

    // Calculate Available = Total - sum of Allocation
    int TotalAlloc[3] = {0, 0, 0};
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            TotalAlloc[j] += Allocation[i][j];

    for(j = 0; j < m; j++)
        Available[j] = Total[j] - TotalAlloc[j];

    while(1) 
    {
        printf("\nMenu:\n");
        printf("1. Display Allocation and Max (Request)\n");
        printf("2. Display Need matrix\n");
        printf("3. Display Available resources\n");
        printf("4. Check Deadlock\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) 
        {
            case 1:
                printf("\nAllocation Matrix:\n");
                for(i = 0; i < n; i++) 
                {
                    for(j = 0; j < m; j++)
                        printf("%d ", Allocation[i][j]);
                    printf("\n");
                }
                printf("\nMax (Request) Matrix:\n");
                for(i = 0; i < n; i++) 
                {
                    for(j = 0; j < m; j++)
                        printf("%d ", Request[i][j]);
                    printf("\n");
                }
                break;

            case 2:
                printf("\nNeed Matrix:\n");
                for(i = 0; i < n; i++) 
                {
                    for(j = 0; j < m; j++)
                        printf("%d\t", Need[i][j]);
                    printf("\n");
                }
                break;

            case 3:
                printf("\nAvailable Resources:\n");
                for(j = 0; j < m; j++)
                    printf("%d ", Available[j]);
                printf("\n");
                break;

            case 4:
                {
                    int deadlock = 0;
                    for(i = 0; i < n; i++) 
                    {
                        for(j = 0; j < m; j++) 
                        {
                            if(Need[i][j] > Available[j]) 
                            {
                                deadlock = 1;
                                break;
                            }
                        }
                        if(deadlock) 
                        break;
                    }
                    if(deadlock)
                        printf("\nDeadlock occurred!\n");
                    else
                        printf("\nNo deadlock occurred.\n");
                }
                break;

            case 5:
                exit(0);

            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
