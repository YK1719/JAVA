#include <stdio.h>
int main() {
    int i, j, n, temp;
    int at[20], bt[20], ct[20], tat[20], wt[20], proc[20];
    float atat = 0, awt = 0;
    //int io_wait = 2; 
  //srand(time(0)); 
 printf("Enter the number of processes: ");
    scanf("%d", &n);
  for(i = 0; i < n; i++) {
        proc[i] = i + 1;
        printf("Enter first CPU Burst for P[%d]: ", i + 1);
        scanf("%d", &bt[i])   }
  for(i = 0; i < n; i++)  {
        printf("Enter Arrival Time for P[%d]: ", i + 1);
        scanf("%d", &at[i])   }
    for(i = 0; i < n - 1; i++) {
        for(j = i + 1; j < n; j++) {
            if(at[i] > at[j]) {
                temp = at[i]; 
                at[i] = at[j]; 
                at[j] = temp;
                temp = bt[i]; 
                bt[i] = bt[j]; 
                bt[j] = temp;
                temp = proc[i]; 
                proc[i] = proc[j]; 
                proc[j] = temp;
            }
        }
    }
    ct[0] = at[0] + bt[0];
    for(i = 1; i < n; i++) 
    {
        // random next CPU burst 1-5 units
        ct[i] = ct[i - 1] + bt[i];
    }

    // Calculate Turnaround Time and Waiting Time
    for(i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
        atat += tat[i];
        awt += wt[i];
    } printf("\nGantt Chart:\n|");
    for(i = 0; i < n; i++)
        printf(" P[%d]->%d |", proc[i],ct[i]);
    printf("\n");
    printf("\nProcess\tBT\tAT\tCT\tTAT\tWT\n");
    for(i = 0; i < n; i++)
        printf("P[%d]\t%d\t%d\t%d\t%d\t%d\n", proc[i], bt[i], at[i], ct[i], tat[i], wt[i]);

    printf("\nAverage Turnaround Time: %.2f", atat / n);
    printf("\nAverage Waiting Time: %.2f\n", awt / n);

    return 0;
}




//S4,S13,S1
#include <stdio.h>
int main() {
    int n=5, m=4, i, j, k, f[5]={0}, ind=0;
    int alloc[5][4] = {{0,0,1,2},{1,0,0,0},{1,3,5,4},{0,6,3,2},{0,0,1,4}};
    int max[5][4]   = {{0,0,1,2},{1,7,5,0},{2,3,5,6},{0,6,5,2},{0,6,5,6}};
    int avail[4]    = {1,5,2,0};
    int need[5][4], ans[5];
    for(i=0;i<n;i++)
        for(j=0;j<m;j++)
            need[i][j] = max[i][j] - alloc[i][j];
  printf("Need Matrix:\n");
    for(i=0;i<n;i++) {
        for(j=0;j<m;j++) printf("%d ", need[i][j]);
        printf("\n");    }
    int work[4];
    for(i=0;i<m;i++) 
    work[i]=avail[i];
    int cnt=0;
    while(cnt<n)  {
        int found=0;
        for(i=0;i<n;i++)     {
            if(f[i]==0)  {
                int flag=1;
                for(j=0;j<m;j++)
                    if(need[i][j]>work[j]) 
                    flag=0;
                if(flag)  {
                    for(k=0;k<m;k++) 
                    work[k]+=alloc[i][k];
                    ans[ind++]=i; 
                    f[i]=1; 
                    found=1;  }}           }
        if(!found) 
        break;
        cnt++ }
   if(ind==n) {
        printf("\nSystem is in SAFE STATE\nSafe sequence: ");
        for(i=0;i<n;i++) 
        printf("P%d ", ans[i]);
    } else {
        printf("\nSystem is NOT in safe state\n"); }
 // Request (from P1): {0,4,2,0}
    int req[4]={0,4,2,0}, p=1;
    int grant=1;
    for(i=0;i<m;i++) 
    {
        if(req[i]>need[p][i] || req[i]>avail[i]) 
        grant=0;
    }
    if(grant) 
    printf("\n\nRequest can be granted immediately.");
    else 
    printf("\n\nRequest CANNOT be granted immediately.");
    printf("\nSystem is in SAFE STATE\nSafe sequence: ");
        for(i=0;i<n;i++) 
        printf("P%d ", ans[i]);
    
    return 0;
}


